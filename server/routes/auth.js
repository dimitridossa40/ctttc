// routes/auth.js
import express from 'express';
import jwt from 'jsonwebtoken';
import { ethers } from 'ethers';
import { PrismaClient } from '@prisma/client';
import { authenticateWeb3Token } from '../middleware/Auth.js';

const router = express.Router();
const prisma = new PrismaClient();

// Configuration des tokens
const JWT_SECRET = process.env.JWT_SECRET;
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h';

// Fonction pour g√©n√©rer un nonce al√©atoire
const generateNonce = () => {
  return Math.floor(Math.random() * 1000000).toString();
};

// Fonction pour g√©n√©rer le token JWT
const generateAccessToken = (walletAddress) => {
  return jwt.sign(
    { 
      walletAddress,
      type: 'access',
      timestamp: Date.now()
    },
    JWT_SECRET,
    { expiresIn: JWT_EXPIRES_IN }
  );
};

// GET /api/auth/nonce/:walletAddress
// R√©cup√©rer le nonce pour une adresse wallet
router.get('/nonce/:walletAddress', async (req, res) => {
  try {
    const { walletAddress } = req.params;

    console.log('üîç Nonce request for:', walletAddress);

    // Valider le format de l'adresse
    if (!ethers.isAddress(walletAddress)) {
      return res.status(400).json({ 
        error: 'Format d\'adresse wallet invalide' 
      });
    }

    // G√©n√©rer un nouveau nonce
    const nonce = generateNonce();

    // Cr√©er ou mettre √† jour l'utilisateur
    const user = await prisma.user.upsert({
      where: { walletAddress: walletAddress.toLowerCase() },
      update: { 
        nonce,
        updatedAt: new Date()
      },
      create: {
        walletAddress: walletAddress.toLowerCase(),
        nonce,
        isVerified: false
      }
    });

    const message = `Connectez-vous √† CertifyWeb3 avec votre wallet.\n\nNonce: ${nonce}\nTimestamp: ${new Date().toISOString()}`;

    console.log('‚úÖ Nonce generated:', { walletAddress, nonce });

    res.json({
      nonce,
      message
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du nonce:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la g√©n√©ration du nonce' 
    });
  }
});

// POST /api/auth/verify
// V√©rifier la signature et connecter l'utilisateur
router.post('/verify', async (req, res) => {
  try {
    const { walletAddress, signature, message } = req.body;

    console.log('üîê Verify request:', { walletAddress, hasSignature: !!signature, hasMessage: !!message });

    if (!walletAddress || !signature || !message) {
      return res.status(400).json({ 
        error: 'Adresse wallet, signature et message requis' 
      });
    }

    // Valider le format de l'adresse
    if (!ethers.isAddress(walletAddress)) {
      return res.status(400).json({ 
        error: 'Format d\'adresse wallet invalide' 
      });
    }

    // R√©cup√©rer l'utilisateur
    const user = await prisma.user.findUnique({
      where: { walletAddress: walletAddress.toLowerCase() },
      include: {
        company: true
      }
    });

    if (!user) {
      return res.status(404).json({ 
        error: 'Utilisateur non trouv√©. R√©cup√©rez d\'abord un nonce.' 
      });
    }

    // V√©rifier que le message contient le bon nonce
    if (!message.includes(user.nonce)) {
      return res.status(400).json({ 
        error: 'Nonce invalide dans le message' 
      });
    }

    // V√©rifier la signature
    try {
      const recoveredAddress = ethers.verifyMessage(message, signature);
      
      if (recoveredAddress.toLowerCase() !== walletAddress.toLowerCase()) {
        return res.status(401).json({ 
          error: 'Signature invalide',
          code: 'INVALID_SIGNATURE' 
        });
      }
    } catch (signatureError) {
      console.error('‚ùå Signature verification error:', signatureError);
      return res.status(401).json({ 
        error: 'Erreur lors de la v√©rification de la signature' 
      });
    }

    // Mettre √† jour l'utilisateur comme v√©rifi√©
    const updatedUser = await prisma.user.update({
      where: { walletAddress: walletAddress.toLowerCase() },
      data: {
        isVerified: true,
        lastLogin: new Date(),
        nonce: generateNonce() // G√©n√©rer un nouveau nonce pour la prochaine connexion
      },
      include: {
        company: true
      }
    });

    // G√©n√©rer le token JWT
    const accessToken = generateAccessToken(walletAddress.toLowerCase());

    console.log('‚úÖ Authentication successful:', { walletAddress, hasCompany: !!updatedUser.company });

    res.json({
      message: 'Connexion r√©ussie',
      user: {
        id: updatedUser.id,
        walletAddress: updatedUser.walletAddress,
        email: updatedUser.email,
        isVerified: updatedUser.isVerified,
        lastLogin: updatedUser.lastLogin,
        company: updatedUser.company
      },
      accessToken
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la v√©rification' 
    });
  }
});

// POST /api/auth/refresh
// Rafra√Æchir le token (simple renouvellement)
router.post('/refresh', authenticateWeb3Token, async (req, res) => {
  try {
    // G√©n√©rer un nouveau token
    const accessToken = generateAccessToken(req.user.walletAddress);

    // Mettre √† jour le lastLogin
    await prisma.user.update({
      where: { walletAddress: req.user.walletAddress },
      data: { lastLogin: new Date() }
    });

    res.json({
      message: 'Token rafra√Æchi avec succ√®s',
      accessToken
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du rafra√Æchissement:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors du rafra√Æchissement' 
    });
  }
});

// GET /api/auth/profile
// R√©cup√©rer le profil utilisateur
router.get('/profile', authenticateWeb3Token, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({
      where: { walletAddress: req.user.walletAddress },
      include: {
        company: true
      }
    });

    if (!user) {
      return res.status(404).json({ 
        error: 'Utilisateur non trouv√©' 
      });
    }

    res.json({
      user: {
        id: user.id,
        walletAddress: user.walletAddress,
        email: user.email,
        isVerified: user.isVerified,
        lastLogin: user.lastLogin,
        createdAt: user.createdAt,
        company: user.company
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du profil:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la r√©cup√©ration du profil' 
    });
  }
});

// PUT /api/auth/profile
// Mettre √† jour le profil utilisateur
router.put('/profile', authenticateWeb3Token, async (req, res) => {
  try {
    const { email } = req.body;

    // Validation de l'email si fourni
    if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return res.status(400).json({ 
        error: 'Format d\'email invalide' 
      });
    }

    // V√©rifier si l'email n'est pas d√©j√† utilis√©
    if (email) {
      const existingUser = await prisma.user.findUnique({
        where: { email }
      });

      if (existingUser && existingUser.walletAddress !== req.user.walletAddress) {
        return res.status(409).json({ 
          error: 'Cet email est d√©j√† utilis√©' 
        });
      }
    }

    // Mettre √† jour l'utilisateur
    const updatedUser = await prisma.user.update({
      where: { walletAddress: req.user.walletAddress },
      data: {
        email: email || undefined,
        updatedAt: new Date()
      },
      include: {
        company: true
      }
    });

    res.json({
      message: 'Profil mis √† jour avec succ√®s',
      user: {
        id: updatedUser.id,
        walletAddress: updatedUser.walletAddress,
        email: updatedUser.email,
        isVerified: updatedUser.isVerified,
        lastLogin: updatedUser.lastLogin,
        company: updatedUser.company
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du profil:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la mise √† jour du profil' 
    });
  }
});

// POST /api/auth/logout
// D√©connexion (principalement c√¥t√© client)
router.post('/logout', authenticateWeb3Token, async (req, res) => {
  try {
    // Optionnel: mettre √† jour des statistiques de d√©connexion
    await prisma.user.update({
      where: { walletAddress: req.user.walletAddress },
      data: { updatedAt: new Date() }
    });

    res.json({ 
      message: 'D√©connexion r√©ussie' 
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©connexion:', error);
    res.status(500).json({ 
      error: 'Erreur serveur lors de la d√©connexion' 
    });
  }
});

export default router;